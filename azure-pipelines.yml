# .NET Core Function App to Windows on Azure
# Build a .NET Core function app and deploy it to Azure as a Windows function App.
# Add steps that analyze code, save build artifacts, deploy, and more:
# https://docs.microsoft.com/en-us/azure/devops/pipelines/languages/dotnet-core

trigger:
- master

variables:
  system.debug: false
  
  # Azure Resource Manager connection created during pipeline creation
  azureSubscription: 'AzureCloud'

  # Function app name
  functionAppName: 'seobot-dev-func'

  # Agent VM image name
  vmImageName: 'vs2017-win2016'

  # Working Directory
  workingDirectory: '$(System.DefaultWorkingDirectory)/'

  CLIENT_ID: '$(ARM_CLIENT_ID)'
  CLIENT_SECRET: '$(ARM_CLIENT_SECRET)'
  SUBSCRIPTION_ID: '$(ARM_SUBSCRIPTION_ID)'
  TENANT_ID: '$(ARM_TENANT_ID)'


stages:
- stage: Build
  displayName: Build stage

  jobs:
  - job: Build
    displayName: Build
    pool:
      vmImage: $(vmImageName)

    steps:
    - task: DotNetCoreCLI@2
      displayName: Build
      inputs:
        command: 'build'
        projects: |
          $(workingDirectory)/*.csproj
        arguments: --output $(System.DefaultWorkingDirectory)/publish_output --configuration Release
    
    #- task: DotNetCoreCLI@2
      #displayName: Test
      #inputs:
        #command: test
        #projects: |
          #$(workingDirectory)/*.csproj
        #arguments: --configuration Release

    - task: ArchiveFiles@2
      displayName: 'Archive files'
      inputs:
        rootFolderOrFile: '$(System.DefaultWorkingDirectory)/publish_output'
        includeRootFolder: false
        archiveType: zip
        archiveFile: $(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip
        replaceExistingArchive: true

    - publish: $(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip
      artifact: drop

- stage: Terraform
  displayName: Terraform stage
  dependsOn: Build
  condition: succeeded()

  jobs:
  - job: Terraform
    displayName: Terraform
    pool:
      vmImage: $(vmImageName)

    steps:
    - task: TerraformInstaller@0
      inputs:
        terraformVersion: '0.14.9'
      displayName: 'Install Terraform 0.14.9'
    
    - task: TerraformTaskV1@0
      inputs:
        command: 'init'
        provider: 'azurerm'
        workingDirectory: '$(System.DefaultWorkingDirectory)/Terraform'
        backendServiceArm: 'AzureCloud'
        environmentServiceNameAzureRM: 'AzureCloud'
        backendAzureRmResourceGroupName: 'terraform-state-rg'
        backendAzureRmStorageAccountName: 'ganttcloudstate997'
        backendAzureRmContainerName: 'tfstate'
        backendAzureRmKey: 'dev.seo-bot.tfstate'
      displayName: 'Terraform Init'

    - task: TerraformTaskV1@0
      inputs:
        command: 'plan'
        provider: 'azurerm'
        workingDirectory: '$(System.DefaultWorkingDirectory)/Terraform'
        backendServiceArm: 'AzureCloud'
        environmentServiceNameAzureRM: 'AzureCloud'
        backendAzureRmResourceGroupName: 'terraform-state-rg'
        backendAzureRmStorageAccountName: 'ganttcloudstate997'
        backendAzureRmContainerName: 'tfstate'
        backendAzureRmKey: 'dev.seo-bot.tfstate'
        commandOptions: -var=ARM_CLIENT_ID=$(CLIENT_ID) -var=ARM_CLIENT_SECRET=$(CLIENT_SECRET) -var=ARM_TENANT_ID=$(TENANT_ID) -var=ARM_SUBSCRIPTION_ID=$(SUBSCRIPTION_ID)
      displayName: 'Terraform Plan'

    - task: TerraformTaskV1@0
      inputs:
        command: 'apply'
        provider: 'azurerm'
        workingDirectory: '$(System.DefaultWorkingDirectory)/Terraform'
        environmentServiceNameAzureRM: 'AzureCloud'
        commandOptions: -var=ARM_CLIENT_ID=$(CLIENT_ID) -var=ARM_CLIENT_SECRET=$(CLIENT_SECRET) -var=ARM_TENANT_ID=$(TENANT_ID) -var=ARM_SUBSCRIPTION_ID=$(SUBSCRIPTION_ID)
      displayName: 'Terraform Apply'

- stage: Deploy
  displayName: Deploy stage
  dependsOn: 
  - Build
  - Terraform
  condition: succeeded()

  jobs:
  - deployment: Deploy
    displayName: Deploy
    environment: 'development'
    pool:
      vmImage: $(vmImageName)

    strategy:
      runOnce:
        deploy:

          steps:
          - task: AzureFunctionApp@1
            displayName: 'Azure functions app deploy'
            inputs:
              azureSubscription: '$(azureSubscription)'
              appType: functionApp
              appName: $(functionAppName)
              package: '$(Pipeline.Workspace)/drop/$(Build.BuildId).zip'