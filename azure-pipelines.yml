# .NET Core Function App to Windows on Azure
# Build a .NET Core function app and deploy it to Azure as a Windows function App.
# Add steps that analyze code, save build artifacts, deploy, and more:
# https://docs.microsoft.com/en-us/azure/devops/pipelines/languages/dotnet-core

trigger:
- master

pool:
  vmImage: 'ubuntu-latest'

variables:
  system.debug: false

  imageName: 'seo-bot'
  
  # Azure Resource Manager connection created during pipeline creation
  azureSubscription: 'AzureCloud'
  # Container registry service connection
  dockerRegistryServiceConnection: 'AzureACR'
  imageRepository: 'seo-bot'
  containerRegistry: 'seobotdevacr'
  dockerfilePath: '$(Build.SourcesDirectory)/Dockerfile'
  tag: 'latest'

  # Function app name
  functionAppName: 'seobot-dev-func'
  
  # Agent VM image name
  vmImageName: 'ubuntu-latest'

  # Working Directory
  workingDirectory: '$(System.DefaultWorkingDirectory)/'

  CLIENT_ID: '$(ARM_CLIENT_ID)'
  CLIENT_SECRET: '$(ARM_CLIENT_SECRET)'
  SUBSCRIPTION_ID: '$(ARM_SUBSCRIPTION_ID)'
  TENANT_ID: '$(ARM_TENANT_ID)'


stages:
- stage: Terraform
  displayName: Terraform stage

  jobs:
  - job: Terraform
    displayName: Terraform
    pool:
      vmImage: $(vmImageName)

    steps:
    - task: TerraformInstaller@0
      inputs:
        terraformVersion: '0.14.9'
      displayName: 'Install Terraform 0.14.9'
    
    - task: TerraformTaskV1@0
      inputs:
        command: 'init'
        provider: 'azurerm'
        workingDirectory: '$(System.DefaultWorkingDirectory)/Terraform'
        backendServiceArm: 'AzureCloud'
        environmentServiceNameAzureRM: 'AzureCloud'
        backendAzureRmResourceGroupName: 'terraform-state-rg'
        backendAzureRmStorageAccountName: 'ganttcloudstate997'
        backendAzureRmContainerName: 'tfstate'
        backendAzureRmKey: 'dev.seo-bot.tfstate'
      displayName: 'Terraform Init'

    - task: TerraformTaskV1@0
      inputs:
        command: 'plan'
        provider: 'azurerm'
        workingDirectory: '$(System.DefaultWorkingDirectory)/Terraform'
        backendServiceArm: 'AzureCloud'
        environmentServiceNameAzureRM: 'AzureCloud'
        backendAzureRmResourceGroupName: 'terraform-state-rg'
        backendAzureRmStorageAccountName: 'ganttcloudstate997'
        backendAzureRmContainerName: 'tfstate'
        backendAzureRmKey: 'dev.seo-bot.tfstate'
        commandOptions: -var=ARM_CLIENT_ID=$(CLIENT_ID) -var=ARM_CLIENT_SECRET=$(CLIENT_SECRET) -var=ARM_TENANT_ID=$(TENANT_ID) -var=ARM_SUBSCRIPTION_ID=$(SUBSCRIPTION_ID)
      displayName: 'Terraform Plan'

    - task: TerraformTaskV1@0
      inputs:
        command: 'apply'
        provider: 'azurerm'
        workingDirectory: '$(System.DefaultWorkingDirectory)/Terraform'
        environmentServiceNameAzureRM: 'AzureCloud'
        commandOptions: -var=ARM_CLIENT_ID=$(CLIENT_ID) -var=ARM_CLIENT_SECRET=$(CLIENT_SECRET) -var=ARM_TENANT_ID=$(TENANT_ID) -var=ARM_SUBSCRIPTION_ID=$(SUBSCRIPTION_ID)
      displayName: 'Terraform Apply'

- stage: Deploy
  displayName: Deploy stage
  dependsOn: 
  - Terraform
  condition: succeeded()

  jobs:
  - job: Deploy
    displayName: Deploy
    pool:
      vmImage: $(vmImageName)

    steps:
    - task: Docker@2
      displayName: 'Build an image'
      inputs:
        repository: '$(imageRepository)'
        command: build
        tag: '$(tag)'
        Dockerfile: Dockerfile
    
    - task: Docker@2
      displayName: 'Push an image'
      inputs:
        containerRegistry: 'AzureACR'
        repository: '$(imageRepository)'
        command: 'push'
        tags: '$(tag)'

    - task: AzureFunctionAppContainer@1
      displayName: 'Deploy an image'
      inputs:
        azureSubscription: $(azureSubscription)
        appName: $(functionAppName)
        imageName: $(containerRegistry)/$(imageRepository):$(tag)