# .NET Core Function App to Windows on Azure
# Build a .NET Core function app and deploy it to Azure as a Windows function App.
# Add steps that analyze code, save build artifacts, deploy, and more:
# https://docs.microsoft.com/en-us/azure/devops/pipelines/languages/dotnet-core

trigger:
  branches:
    include:
    - master
  paths:
    exclude:
    - JupyterNotebooks/*

pool:
  vmImage: 'ubuntu-latest'

variables:
  system.debug: false
  # Agent VM image name
  vmImageName: 'ubuntu-latest'

  # Azure Resource Manager connection created during pipeline creation
  azureServiceConnection: 'AzureCloud'
  # Container registry service connection
  dockerRegistryServiceConnection: 'SEOBOTACR'

  # Terraform task variables
  CLIENT_ID: '$(ARM_CLIENT_ID)'
  CLIENT_SECRET: '$(ARM_CLIENT_SECRET)'
  SUBSCRIPTION_ID: '$(ARM_SUBSCRIPTION_ID)'
  TENANT_ID: '$(ARM_TENANT_ID)'
  TF_ResourceGroup: 'terraform-state-rg'
  TF_StorageAccount: 'ganttcloudstate997'
  TF_Container: 'tfstate'
  TF_StateFile: 'dev.seo-bot.tfstate'

  # Docker task variables
  imageRepository: 'seo-bot'
  containerRegistry: 'seobotdevacr'
  imageName: 'seo-bot'
  dockerfilePath: '$(Build.SourcesDirectory)/Dockerfile'
  tag: 'latest'

stages:
- stage: Terraform
  displayName: Terraform stage

  jobs:
  - job: Terraform
    displayName: Terraform
    pool:
      vmImage: $(vmImageName)

    steps:
    - task: TerraformInstaller@0
      inputs:
        terraformVersion: '0.14.9'
      displayName: 'Install Terraform 0.14.9'
    
    - task: TerraformTaskV1@0
      displayName: 'Terraform Init'
      inputs:
        command: 'init'
        provider: 'azurerm'
        workingDirectory: '$(System.DefaultWorkingDirectory)/Terraform'
        backendServiceArm: '$(azureServiceConnection)'
        environmentServiceNameAzureRM: '$(azureServiceConnection)'
        backendAzureRmResourceGroupName: '$(TF_ResourceGroup)'
        backendAzureRmStorageAccountName: '$(TF_StorageAccount)'
        backendAzureRmContainerName: '$(TF_Container)'
        backendAzureRmKey: '$(TF_StateFile)'
      
    - task: TerraformTaskV1@0
      displayName: 'Terraform Plan'
      inputs:
        command: 'plan'
        provider: 'azurerm'
        workingDirectory: '$(System.DefaultWorkingDirectory)/Terraform'
        backendServiceArm: '$(azureServiceConnection)'
        environmentServiceNameAzureRM: '$(azureServiceConnection)'
        backendAzureRmResourceGroupName: '$(TF_ResourceGroup)'
        backendAzureRmStorageAccountName: '$(TF_StorageAccount)'
        backendAzureRmContainerName: '$(TF_Container)'
        backendAzureRmKey: '$(TF_StateFile)'
        commandOptions: -var=ARM_CLIENT_ID=$(CLIENT_ID) -var=ARM_CLIENT_SECRET=$(CLIENT_SECRET) -var=ARM_TENANT_ID=$(TENANT_ID) -var=ARM_SUBSCRIPTION_ID=$(SUBSCRIPTION_ID)

    - task: TerraformTaskV1@0
      displayName: 'Terraform Apply'
      inputs:
        command: 'apply'
        provider: 'azurerm'
        workingDirectory: '$(System.DefaultWorkingDirectory)/Terraform'
        environmentServiceNameAzureRM: '$(azureServiceConnection)'
        commandOptions: -var=ARM_CLIENT_ID=$(CLIENT_ID) -var=ARM_CLIENT_SECRET=$(CLIENT_SECRET) -var=ARM_TENANT_ID=$(TENANT_ID) -var=ARM_SUBSCRIPTION_ID=$(SUBSCRIPTION_ID)

- stage: Deploy
  displayName: Deploy stage
  dependsOn: 
  - Terraform
  condition: succeeded()

  jobs:
  - job: Deploy
    displayName: Deploy
    pool:
      vmImage: $(vmImageName)

    steps:
    - task: Docker@2
      displayName: 'Login Container Registry'
      inputs:
        containerRegistry: '$(dockerRegistryServiceConnection)'
        command: 'login'

    - task: Docker@2
      displayName: 'Build/Push an image'
      inputs:
        containerRegistry: '$(dockerRegistryServiceConnection)'
        repository: '$(imageRepository)'
        command: 'buildAndPush'
        Dockerfile: '$(dockerfilePath)'
        tags: '$(tag)'
    